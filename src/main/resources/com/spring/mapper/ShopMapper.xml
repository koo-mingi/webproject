<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.ShopMapper">
	
	<!-- 상품 끌고오기 -->
	<select id="select" resultType="com.spring.domain.ShopProductVO">
	<![CDATA[
		select *
		from (select rownum rn,pid,pname,price,saleprice,amount,category,description,gradeavg,volume,shipcost,storage,expdate 
      			from (select * from producttbl
      ]]>
      <include refid="criteria"></include>
      <![CDATA[		
      			)
      			where (saleprice between #{lower} and #{upper}) and pid > 0 and rownum <= (#{pageNum}*#{amount})
      ]]>
      <include refid="mainCaterory"></include>
      <include refid="shipCost"></include>
      <include refid="storage"></include>
      <![CDATA[	
      			)
		where rn > (#{pageNum}-1)*#{amount}
	]]>
	</select>
	
	<!-- 상품 전체 개수 구하기 -->
	<select id="total" resultType="int">
		select count(*) from producttbl where pid>0 and (saleprice between #{lower} and #{upper})
		<include refid="mainCaterory"></include>
		<include refid="shipCost"></include>
		<include refid="storage"></include>
	</select>
	
	<!-- 동적 sql 작성 -->
	<sql id="criteria">
		<trim prefix="order by ">
			<choose>
				<when test="type == ''.toString()">
					pid desc
				</when>
				<when test="type == 'R'.toString()">
					gradeavg desc
				</when>
				<when test="type == 'P'.toString()">
					saleprice desc
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 메인 카테고리 sql 작성 -->
	<sql id="mainCaterory">
		<trim prefix=" and ">
			<choose>
				<when test="mainCategory == '1'.toString()">
					category like '식사대용'
				</when>
				<when test="mainCategory == '2'.toString()">
					category like '건강간식'
				</when>
				<when test="mainCategory == '3'.toString()">
					category like '보조식품'
				</when>
				<when test="mainCategory == '4'.toString()">
					category like '운동용품'
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 보관방법 카테고리 sql 작성 -->
	<sql id="storage">
		<trim prefix=" and ">
			<choose>
				<when test="storage == 'R'.toString()">
					storage like '냉장보관'
				</when>
				<when test="storage == 'A'.toString()">
					storage like '상온보관'
				</when>
				<when test="storage == 'I'.toString()">
					storage like '냉동보관'
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 배송비 카테고리 sql 작성 -->
	<sql id="shipCost">
		<trim prefix=" and ">
			<choose>
				<when test="shipCost == 0">
					shipcost like 0
				</when>
				<when test="shipCost == 2500">
					shipcost like 2500
				</when>
				<when test="shipCost == 5000">
					shipcost like 5000
				</when>
			</choose>
		</trim>
	</sql>
	
	
	
	<!-- 상품 1개 정보 가져오기 -->
	<select id="get" resultType="com.spring.domain.ShopProductVO">
		select * from producttbl where pid=#{pid}
	</select>
	
	<!-- 상품의 코멘트 목록 가져오기 -->
	<select id="selectComment" resultType="com.spring.domain.ShopCommentVO">
		<![CDATA[
			select * 
			from (select rownum rn, cid, pid, userid, title, content, regdate,re_ref,re_seq,re_lev
				  from (select * from commentTBL order by re_ref desc, re_seq asc) 
				  where pid = #{pid} and cid > 0 and rownum <= #{pageNum} * 10)
			where rn > (#{pageNum}-1) * 10
			 
		]]>
	</select>
	
	<!-- 상품 코멘트 추가하기 --> 
	<insert id="insertComment">
		insert into commentTBL(cid,pid,userid,title,content,re_ref)
		 values(comment_seq.nextval,#{pid},#{userid},#{title},#{content},comment_seq.currval)
	</insert>
	
	<!-- 상품 코멘트 답글 달기 -->
	<insert id="insertCommentReply">
		insert into commentTBL(cid,pid,userid,title,content,re_ref,re_seq,re_lev)
		 values(comment_seq.nextval,#{pid},#{userid},#{title},#{content},#{re_ref},#{re_seq},#{re_lev})
	</insert>
	
	<!-- 상품 코멘트 답글달기 전에 값 변경하기 -->
	<update id="updateComment">
		update commentTBL set re_seq=re_seq+1 where re_ref=#{re_ref} and re_seq>#{re_seq}
	</update>
	
	<!-- 특정 상품의 전체 답글 개수 가져오기 -->
	<select id="totalComment" resultType="int">
		select count(*) from commentTBL where pid=#{pid} and cid>0
	</select>
</mapper>