<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.ShopMapper">
	
	<!-- 상품 끌고오기 -->
	<select id="select" resultType="com.spring.domain.ShopProductVO">
	<![CDATA[
		select *
		from (select rownum rn,pid,pname,price,saleprice,amount,category,description,gradeavg,volume,shipcost,storage,expdate 
      			from (select * from producttbl
      ]]>
      <include refid="criteria"></include>
      <![CDATA[		
      			)
      			where (saleprice between #{lower} and #{upper}) and pid > 0 and rownum <= (#{pageNum}*#{amount})
      ]]>
      <include refid="mainCaterory"></include>
      <include refid="shipCost"></include>
      <include refid="storage"></include>
      <![CDATA[	
      			)
		where rn > (#{pageNum}-1)*#{amount}
	]]>
	</select>
	
	<!-- 상품 전체 개수 구하기 -->
	<select id="total" resultType="int">
		select count(*) from producttbl where pid>0 and (saleprice between #{lower} and #{upper})
		<include refid="mainCaterory"></include>
		<include refid="shipCost"></include>
		<include refid="storage"></include>
	</select>
	
	<!-- 동적 sql 작성 -->
	<sql id="criteria">
		<trim prefix="order by ">
			<choose>
				<when test="type == ''.toString()">
					pid desc
				</when>
				<when test="type == 'R'.toString()">
					gradeavg desc
				</when>
				<when test="type == 'P'.toString()">
					saleprice desc
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 메인 카테고리 sql 작성 -->
	<sql id="mainCaterory">
		<trim prefix=" and ">
			<choose>
				<when test="mainCategory == '1'.toString()">
					category like '식사대용'
				</when>
				<when test="mainCategory == '2'.toString()">
					category like '건강간식'
				</when>
				<when test="mainCategory == '3'.toString()">
					category like '보조식품'
				</when>
				<when test="mainCategory == '4'.toString()">
					category like '운동용품'
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 보관방법 카테고리 sql 작성 -->
	<sql id="storage">
		<trim prefix=" and ">
			<choose>
				<when test="storage == 'R'.toString()">
					storage like '냉장보관'
				</when>
				<when test="storage == 'A'.toString()">
					storage like '상온보관'
				</when>
				<when test="storage == 'I'.toString()">
					storage like '냉동보관'
				</when>
			</choose>
		</trim>
	</sql>
	
	<!-- 배송비 카테고리 sql 작성 -->
	<sql id="shipCost">
		<trim prefix=" and ">
			<choose>
				<when test="shipCost == 0">
					shipcost like 0
				</when>
				<when test="shipCost == 2500">
					shipcost like 2500
				</when>
				<when test="shipCost == 5000">
					shipcost like 5000
				</when>
			</choose>
		</trim>
	</sql>
	
	
	<!-- 상품 1개 정보 가져오기 -->
	<select id="get" resultType="com.spring.domain.ShopProductVO">
		select * from producttbl where pid=#{pid}
	</select>
	
	<!-- 코멘트 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
	
	<!-- 상품의 코멘트 목록 가져오기 -->
	<select id="selectComment" resultType="com.spring.domain.ShopCommentVO">
		<![CDATA[
			select * 
			from (select rownum rn, cid, pid, userid, title, content, regdate,re_ref,re_seq,re_lev
				  from (select * from commentTBL order by re_ref desc, re_seq asc) 
				  where pid = #{pid} and cid > 0 and rownum <= #{pageNum} * 10)
			where rn > (#{pageNum}-1) * 10
			 
		]]>
	</select>
	
	<!-- 상품 코멘트 추가하기 --> 
	<insert id="insertComment">
		insert into commentTBL(cid,pid,userid,title,content,re_ref)
		 values(comment_seq.nextval,#{pid},#{userid},#{title},#{content},comment_seq.currval)
	</insert>
	
	<!-- 상품 코멘트 답글 달기 -->
	<insert id="insertCommentReply">
		insert into commentTBL(cid,pid,userid,title,content,re_ref,re_seq,re_lev)
		 values(comment_seq.nextval,#{pid},#{userid},#{title},#{content},#{re_ref},#{re_seq},#{re_lev})
	</insert>
	
	<!-- 상품 코멘트 답글달기 전에 값 변경하기 -->
	<update id="updateComment">
		update commentTBL set re_seq=re_seq+1 where re_ref=#{re_ref} and re_seq>#{re_seq}
	</update>
	
	<!-- 특정 상품의 전체 답글 개수 가져오기 -->
	<select id="totalComment" resultType="int">
		select count(*) from commentTBL where pid=#{pid} and cid>0
	</select>
	
	<!-- 후기 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
	<insert id="insertReview"> 
		insert into reviewTBL(rid,pid,userid,title,content,grade)
		values(review_seq.nextval,#{pid},#{userid},#{title},#{content},#{grade})
	</insert>
	
	<!-- 상품의 후기 목록 가져오기 -->
	<select id="selectReview" resultType="com.spring.domain.ShopReviewVO">
		<![CDATA[
			select * 
			from (select rownum rn, rid, pid, userid, title, content, grade, regdate
				  from (select * from reviewTBL order by rid desc) 
				  where pid = #{pid} and rid > 0 and rownum <= #{pageNum} * 10)
			where rn > (#{pageNum}-1) * 10
			 
		]]> 
	</select>
	<!-- 상품 후기 전체 수 가져오기 -->
	<select id="totalReview" resultType="int">
		select count(*) from reviewTBL where pid=#{pid}
	</select>
	
	<!-- 별점 가져오기 -->
	<select id="grade5count" resultType="int">
		select count(grade) from reviewTBL where grade=5 and pid=#{pid}
	</select>
	<select id="grade4count" resultType="int">
		select count(grade) from reviewTBL where grade=4 and pid=#{pid}
	</select>
	<select id="grade3count" resultType="int">
		select count(grade) from reviewTBL where grade=3 and pid=#{pid}
	</select>
	<select id="grade2count" resultType="int">
		select count(grade) from reviewTBL where grade=2 and pid=#{pid}
	</select>
	<select id="grade1count" resultType="int">
		select count(grade) from reviewTBL where grade=1 and pid=#{pid}
	</select>
	<select id="gradeAvg" resultType="double">
		select round(avg(grade),1) from reviewTBL where pid = #{pid}
	</select>
	
	<!-- 장바구니 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
	<!-- 장바구니 삽입 -->
	<insert id="insertCart">
		insert into cartTBL(cartid,userid,pid,amount,price) values(cart_seq.nextval,#{userid},#{pid},#{amount},#{price})
	</insert>
	<!-- 장바구니 목록 가져오기 -->
	<select id="selectCart" resultType="com.spring.domain.ShopCartVO">
		select c.cartid,m.userid,m.name,m.phone,m.email,p.pname,c.amount,c.price 
		from cartTBL c 
    		 inner join productTBL p on c.pid = p.pid 
    		 inner join member m on c.userid = m.userid 
		where c.userid=#{userid}
	</select>
	<!-- 장바구니 삭제 -->
	<delete id="deleteCart">
		delete from cartTBL where cartid = #{cartid}
	</delete>
	<!-- 장바구니 최신 상품 1개 가져오기 -->
	<select id="getNewestCart" resultType="com.spring.domain.ShopCartVO">
		select c.cartid,m.userid,m.name,m.phone,m.email,p.pname,c.amount,c.price
		from cartTBL c 
   			 inner join productTBL p on c.pid = p.pid 
   			 inner join member m on c.userid = m.userid 
		where cartid in (select max(cartid) from cartTBL where c.userid=#{userid})
	</select> 
	<!-- 장바구니 상품 1개 가져오기 --> 
	<select id="getCart" resultType="com.spring.domain.ShopCartVO">
		select c.cartid,m.userid,m.name,m.phone,m.email,p.pname,c.amount,c.price,p.pid
		from cartTBL c 
    		 inner join productTBL p on c.pid = p.pid 
    		 inner join member m on c.userid = m.userid  
		where cartid in #{cartid}
	</select>
	
	<!-- 배송지 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
	<!-- 배송지 삽입 -->
	<insert id="insertShip"> 
		insert into shippingTBL(shipid,userid,shiptitle,zipno,roadAddrPart1,addrDetail,roadAddrPart2)
		values(ship_seq.nextval,#{userid},#{shiptitle},#{zipNo},#{roadAddrPart1},#{addrDetail},#{roadAddrPart2})
	</insert>
	<!-- 배송지 목록 가져오기 -->
	<select id="selectShip" resultType="com.spring.domain.ShopShipVO">
		select * from shippingTBL where userid=#{userid}
	</select>
	<!-- 배송지 1개 가져오기 -->
	<select id="getShip" resultType="com.spring.domain.ShopShipVO">
		select * from shippingTBL where shipid=#{shipid}
	</select>
	<!-- 최신 배송지 삽입 -->
	<insert id="insertNewestShip"> 
		insert into shippingTBL(shipid,userid,shiptitle,zipno,roadAddrPart1,addrDetail,roadAddrPart2)
		values(ship_seq.nextval,#{userid},'최신배송지',#{zipNo},#{roadAddrPart1},#{addrDetail},#{roadAddrPart2})
	</insert>
	<!-- 최신 배송지 업데이트 -->
	<update id="updateNewestShip">
		update shippingTBL set zipno=#{zipNo}, roadAddrPart1=#{roadAddrPart1},addrDetail=#{addrDetail},roadAddrPart2=#{roadAddrPart2}
		where shiptitle like '최신배송지' and userid=#{userid}
	</update>
	<!-- 최샌 배송지 존재 여부 확인 -->
	<select id="countShip" resultType="int">
		select count(*) from shippingTBL where shiptitle like '최신배송지' and userid=#{userid}
	</select>
	<!-- 최신 배송지 가져오기 -->
	<select id="getNewestShip" resultType="com.spring.domain.ShopShipVO">
		select * from shippingTBL where shiptitle like '최신배송지' and userid=#{userid}
	</select>
	
	<!-- 주문 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
	<!-- 주문 삽입 -->
	<insert id="insertOrder">
		insert into orderTBL(orderid,orderNum,userid,shipid,totalprice,ordershipcost,payment,phone,name,email)
		values(order_seq.nextval,#{orderNum},#{userid},#{shipid},#{totalprice},#{ordershipcost},#{payment},#{phone},#{name},#{email})
	</insert>
	<!-- 특정 사용자의 최신 주문 1개 가져오기 -->
	<select id="getNewestOrder" resultType="com.spring.domain.ShopOrderVO">
		select * from orderTBL where orderid in (select max(orderid) from orderTBL where userid=#{userid})
	</select>
	<!-- 상세 주문 삽입 -->
	<insert id="insertOrderDetail">
		insert into orderDetailTBL(order_detail_id,orderid,pid,ordercount,orderprice)
		values(orderdetail_seq.nextval,#{orderid},#{pid},#{ordercount},#{orderprice})
	</insert>
	<!-- 상세 주문 가져오기 -->
	<select id="selectOrderDetail" resultType="com.spring.domain.ShopOrderDetailVO">
		select od.order_detail_id,orderid,p.pid,p.pname,ordercount,orderprice from orderDetailTBL od inner join productTBL p on od.pid = p.pid where orderid = #{orderid}
	</select>
	<!-- 특정 사용자의 최신 주문과 관련된 정보 다 가져오기 -->
	<select id="selectOrder" >
		select * 
		from orderTBL o
		    inner join orderDetailTBL od on o.orderid=od.orderid
		    inner join shippingTBL sp on o.shipid=sp.shipid
		    inner join member m on m.userid=o.userid
		    inner join productTBL p on od.pid=p.pid
		where o.orderid in (select max(orderid) from orderTBL where userid=#{userid})
	</select>
</mapper>